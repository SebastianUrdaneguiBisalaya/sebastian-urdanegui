---
import BlogLayout from "@layouts/BlogLayout.astro";
import DetailComments from "@components/detail-comments.astro";
import { marked } from "marked";

interface Comment {
    id: string;
    user_name: string;
    comment: string;
}

const lang = Astro.currentLocale;

export async function getStaticPaths() {
    return [{
        params: {
            id: "1"
        }
    }]
}

const { id } = Astro.params;

if (!id) {
    return Astro.redirect("/404");
}

let post, comments, parsedContent;

try {
    const [responsePost, responseComments] = await Promise.all([
        fetch(`/api/blog?id=${id}`),
        fetch(`/api/comments?id=${id}`)
    ]);
    if (!responsePost.ok || !responseComments.ok) {
        throw new Error(`Ocurrió un error al obtener los datos: ${responsePost.statusText} ${responseComments.statusText}`);
    }
    [post, comments] = await Promise.all([
        responsePost.json(),
        responseComments.json(),
    ]);
    parsedContent = marked(post.content);
} catch (error: unknown) {
    return Astro.redirect("/404");
}
---

<BlogLayout title={post.title}>
    <article id={id} class="w-full flex flex-col gap-4">
        <h1 class="font-sora text-dark dark:text-white font-bold text-2xl w-full">{post.title}</h1>
        <p class="font-reddit font-medium text-dark/80 dark:text-gray-200 w-full">{lang === "en" ? `Written by ${post.author}` : `Escrito por ${post.author}`}</p>
        <div class="flex flex-row items-center justify-between w-full gap-4">
            <p class="font-reddit text-dark/60 dark:text-gray-300 text-xs w-full">{post.date}</p>
            <div class="flex flex-row items-center gap-2">
                <span class="opacity-50">
                    <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 32 32"><path fill="currentColor" d="M30.94 15.66A16.69 16.69 0 0 0 16 5A16.69 16.69 0 0 0 1.06 15.66a1 1 0 0 0 0 .68A16.69 16.69 0 0 0 16 27a16.69 16.69 0 0 0 14.94-10.66a1 1 0 0 0 0-.68M16 25c-5.3 0-10.9-3.93-12.93-9C5.1 10.93 10.7 7 16 7s10.9 3.93 12.93 9C26.9 21.07 21.3 25 16 25"/><path fill="currentColor" d="M16 10a6 6 0 1 0 6 6a6 6 0 0 0-6-6m0 10a4 4 0 1 1 4-4a4 4 0 0 1-4 4"/></svg>
                </span>
                <p class="font-reddit text-dark/60 dark:text-gray-300 text-xs w-full">{post.views}</p>
            </div>
        </div>
        <div class="prose dark:prose-invert" set:html={parsedContent} />
        <div class="flex flex-col gap-2">
            <form id="comment-form" class="flex flex-col gap-2">
                <label
                    class=""
                    for="user-name"
                >
                    {
                        lang === "en" ? "User name" : "Nombre de usuario"
                    }
                </label>
                <input id="user-name" class="" type="text" placeholder={lang === "en" ? "Write your name" : "Escribe tu nombre"} />
                <label
                    class=""
                    for="comment"
                >
                    {
                        lang === "en" ? "Comment" : "Comentario"
                    }
                </label>
                <textarea class="" id="comment" placeholder={lang === "en" ? "Write your comment" : "Escribe tu comentario"}></textarea>
                <button
                    class=""
                    type="submit"
                >
                    {
                        lang === "en" ? "Post comment" : "Publicar comentario"
                    }
                </button>
            </form>
            <div id="comment-response" class="mt-4 p-3 text-sm text-center text-dark/80 dark:text-gray-300 border border-gray-400 w-fit rounded-lg hidden"></div>
            {
                comments.map((comment: Comment) => {
                    return (
                        <DetailComments
                            user_name={comment.user_name}
                            comment={comment.comment}
                        />
                    )
                })
            }
        </div>
    </article>
</BlogLayout>

<script>
    const contentId = document.getElementsByTagName("article")[0].id;
    const postForm = document.getElementById("comment-form") as HTMLFormElement | null;
    const commentResponse = document.getElementById("comment-response") as HTMLDivElement | null;
    
    function showMessage(message: string) {
        if (commentResponse ) {
            postForm?.reset();
            postForm?.classList.add("hidden");
            commentResponse.textContent = message;
            commentResponse.classList.remove("hidden");
        }
    }

    postForm?.addEventListener("submit", async (e) => {
        e.preventDefault();
        const userNameInput = document.getElementById("user-name") as HTMLInputElement | null;
        const commentInput = document.getElementById("comment") as HTMLTextAreaElement | null;

        if (!userNameInput || !commentInput || !contentId) {
            return;
        }

        const userName = userNameInput.value ?? "";
        const comment = commentInput.value ?? "";

        const postData = {
            id: contentId,
            user_name: userName,
            comment: comment
        };

        try {
            const response = await fetch(`/api/comments`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(postData)
            });
            if (!response.ok) {
                throw new Error(`Ocurrió un error al publicar el comentario: ${response.statusText}`);
            }
            showMessage("✅ ¡Tu comentario ha sido publicado!");
        } catch (error: unknown) {
            showMessage("❌ ¡Ocurrió un error al publicar el comentario!");
        }
    });
</script>
---
import Layout from "@layouts/Layout.astro";
import DetailComments from "@components/detail-comments.astro";
import { getEntry, render } from "astro:content";

interface Comment {
  id: string;
  user_name?: string;
  comment: string;
}

const lang = Astro.currentLocale;

const { id } = Astro.params;
const baseUrl = "https://sebastianurdanegui.vercel.app/";

if (!id) {
  return Astro.redirect("/404");
}

// let post, comments, parsedContent;

const comments = [
  {
    id: "0",
    user_name: "Sebastian Urdanegui",
    comment: "Este es un comentario",
  },
];

const post = [
  {
    id: "0",
    author: "Sebastian Urdanegui",
    date: "2023-01-01",
    views: "100",
    comments: "100",
  },
];

const entry = await getEntry("blog", "article-1");
if (!entry) {
  throw new Error(`Entry not found.`);
}

const { Content } = await render(entry);

// try {
//     const [responsePost, responseComments] = await Promise.all([
//         fetch(`${baseUrl}/api/blog?id=${id}&lang=${lang}`),
//         fetch(`${baseUrl}/api/comments?id=${id}`)
//     ]);
//     if (!responsePost.ok || !responseComments.ok) {
//         throw new Error(`Ocurrió un error al obtener los datos: ${responsePost.statusText} ${responseComments.statusText}`);
//     }
//     [post, comments] = await Promise.all([
//         responsePost.json(),
//         responseComments.json(),
//     ]);
//     parsedContent = marked(lang === "en" ? post[0].content_en : post[0].content);
// } catch (error: unknown) {
//     console.error(error);
//     return Astro.redirect("/404");
// }
---

<Layout id={id}>
  <article id={id} class="w-full flex flex-col gap-4">
    <div class="flex flex-row items-center justify-between w-full gap-4">
      <p class="font-reddit text-dark/60 dark:text-gray-300 text-xs w-full">
        {
          lang === "en"
            ? `Update date: ${entry.data.publishDate}`
            : `Fecha de actualización: ${entry.data.publishDate}`
        }
      </p>
      <div class="flex flex-row items-center gap-4 w-fit">
        <div class="flex flex-row items-center gap-2">
          <span class="opacity-50 text-dark/60 dark:text-gray-300">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="15"
              height="15"
              viewBox="0 0 32 32"
              ><path
                fill="currentColor"
                d="M30.94 15.66A16.69 16.69 0 0 0 16 5A16.69 16.69 0 0 0 1.06 15.66a1 1 0 0 0 0 .68A16.69 16.69 0 0 0 16 27a16.69 16.69 0 0 0 14.94-10.66a1 1 0 0 0 0-.68M16 25c-5.3 0-10.9-3.93-12.93-9C5.1 10.93 10.7 7 16 7s10.9 3.93 12.93 9C26.9 21.07 21.3 25 16 25"
              ></path><path
                fill="currentColor"
                d="M16 10a6 6 0 1 0 6 6a6 6 0 0 0-6-6m0 10a4 4 0 1 1 4-4a4 4 0 0 1-4 4"
              ></path></svg
            >
          </span>
          <p class="font-reddit text-dark/60 dark:text-gray-300 text-xs w-full">
            {entry.data.views}
          </p>
        </div>
        <div class="flex flex-row items-center gap-2">
          <span class="opacity-50 text-dark/60 dark:text-gray-300">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="15"
              height="15"
              viewBox="0 0 24 24"
              ><path
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4.3 16.7a9 9 0 1 1 3 3L3 21z"></path></svg
            >
          </span>
          <p class="font-reddit text-dark/60 dark:text-gray-300 text-xs w-full">
            {entry.data.comments}
          </p>
        </div>
      </div>
    </div>
    <article class="prose dark:prose-invert max-w-full">
      <Content />
    </article>
    <div class="flex flex-col gap-4">
      <form id="comment-form" class="flex flex-col gap-2 w-full mb-4">
        <label
          class="font-sora text-dark/60 dark:text-gray-300 text-sm w-full"
          for="user-name"
        >
          {lang === "en" ? "User name" : "Nombre de usuario"}
        </label>
        <input
          id="user-name"
          class="w-full text-dark/80 dark:text-gray-200 text-base font-reddit focus:ring-0 focus:border-0 focus:outline-none border-b-[0.5px] border-gray-500"
          type="text"
          placeholder={lang === "en" ? "Write your name" : "Escribe tu nombre"}
        />
        <label
          class="font-sora text-dark/60 dark:text-gray-300 text-sm w-full"
          for="comment"
        >
          {lang === "en" ? "Comment" : "Comentario"}
        </label>
        <textarea
          class="w-full text-dark/80 dark:text-gray-200 text-base font-reddit focus:ring-0 focus:border-0 focus:outline-none border-b-[0.5px] border-gray-500"
          id="comment"
          placeholder={lang === "en"
            ? "Write your comment"
            : "Escribe tu comentario"}></textarea>
        <button
          class="w-fit bg-dark/90 dark:bg-gray-200 text-gray-200 dark:text-dark/80 text-base font-reddit rounded-lg py-2 px-4 hover:bg-dark/90 dark:hover:bg-gray-100 cursor-pointer"
          type="submit"
        >
          {lang === "en" ? "Post comment" : "Publicar comentario"}
        </button>
      </form>
      <div
        id="comment-response"
        class="my-4 p-3 text-sm text-center text-dark/80 dark:text-gray-300 border border-gray-400 w-fit rounded-lg hidden"
      >
      </div>
      {
        comments?.length > 0 && (
          <h3 class="font-reddit text-dark/60 dark:text-gray-300 text-base w-full">
            {lang === "en" ? "Comments" : "Comentarios"}
          </h3>
        )
      }
      {
        comments?.map((comment: Comment) => {
          return (
            <DetailComments
              user_name={comment.user_name}
              comment={comment.comment}
            />
          );
        })
      }
    </div>
  </article>
</Layout>

<!-- <script>
    const contentId = document.getElementsByTagName("article")[0].id;
    const postForm = document.getElementById("comment-form") as HTMLFormElement | null;
    const commentResponse = document.getElementById("comment-response") as HTMLDivElement | null;

    if (contentId) {
        fetch("/api/projects", {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                id: contentId
            })
        }).catch((error) => console.error("Error al actualizar la cantidad de vistas:", error));
    }
    
    function showMessage(message: string) {
        if (commentResponse ) {
            postForm?.reset();
            postForm?.classList.add("hidden");
            commentResponse.textContent = message;
            commentResponse.classList.remove("hidden");
        }
    }

    postForm?.addEventListener("submit", async (e) => {
        e.preventDefault();
        const userNameInput = document.getElementById("user-name") as HTMLInputElement | null;
        const commentInput = document.getElementById("comment") as HTMLTextAreaElement | null;

        if (!userNameInput || !commentInput || !contentId) {
            return;
        }

        const userName = userNameInput.value ?? "";
        const comment = commentInput.value ?? "";

        if (!userName.trim() || !comment.trim()) {
            return;
        }

        const postData = {
            id: contentId,
            user_name: userName,
            comment: comment
        };

        try {
            const response = await fetch(`/api/comments`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(postData)
            });
            if (!response.ok) {
                throw new Error(`Ocurrió un error al publicar el comentario: ${response.statusText}`);
            }
            showMessage("✅ ¡Tu comentario ha sido publicado!");
        } catch (error: unknown) {
            showMessage("❌ ¡Ocurrió un error al publicar el comentario!");
        }
    });
</script> -->
